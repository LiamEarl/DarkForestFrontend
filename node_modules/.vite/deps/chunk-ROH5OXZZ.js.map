{
  "version": 3,
  "sources": ["../../pixi.js/src/app/ResizePlugin.ts", "../../pixi.js/src/app/TickerPlugin.ts"],
  "sourcesContent": ["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n", "import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;AAmCO,IAAM,eAAN,MACP;;;;;;;EAmBI,OAAc,KAAK,SACnB;AACW,WAAA;MAAe;MAAM;;;;;;;;MAQxB;QACI,IAAI,KACJ;AACe,qBAAA,oBAAoB,UAAU,KAAK,WAAW;AACzD,eAAK,YAAY;AACjB,cAAI,KACJ;AACe,uBAAA,iBAAiB,UAAU,KAAK,WAAW;AACtD,iBAAK,OAAO;UAAA;QAChB;QAEJ,MACA;AACI,iBAAO,KAAK;QAAA;MAChB;IACJ;AASJ,SAAK,cAAc,MACnB;AACQ,UAAA,CAAC,KAAK,WACV;AACI;MAAA;AAGJ,WAAK,cAAc;AAGnB,WAAK,YAAY,sBAAsB,MAAM,KAAK,OAAA,CAAQ;IAAA;AAS9D,SAAK,gBAAgB,MACrB;AACI,UAAI,KAAK,WACT;AACI,6BAAqB,KAAK,SAAS;AACnC,aAAK,YAAY;MAAA;IACrB;AAUJ,SAAK,SAAS,MACd;AACQ,UAAA,CAAC,KAAK,WACV;AACI;MAAA;AAIJ,WAAK,cAAc;AAEf,UAAA;AACA,UAAA;AAGA,UAAA,KAAK,cAAc,WAAW,QAClC;AACI,gBAAQ,WAAW;AACnB,iBAAS,WAAW;MAAA,OAIxB;AACI,cAAM,EAAE,aAAa,aAAa,IAAI,KAAK;AAEnC,gBAAA;AACC,iBAAA;MAAA;AAGR,WAAA,SAAS,OAAO,OAAO,MAAM;AAClC,WAAK,OAAO;IAAA;AAIhB,SAAK,YAAY;AACjB,SAAK,YAAY;AACZ,SAAA,WAAW,QAAQ,YAAY;EAAA;;;;;;EAQxC,OAAc,UACd;AACe,eAAA,oBAAoB,UAAU,KAAK,WAAW;AACzD,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,SAAS;EAAA;AAEtB;AA7Ia,aAGK,YAA+B,cAAc;;;ACWxD,IAAM,eAAN,MACP;;;;;;;EAeI,OAAc,KAAK,SACnB;AAEI,cAAU,OAAO,OAAO;MACpB,WAAW;MACX,cAAc;IAAA,GACf,OAAO;AAGH,WAAA;MAAe;MAAM;MACxB;QACI,IAAI,QACJ;AACI,cAAI,KAAK,SACT;AACI,iBAAK,QAAQ,OAAO,KAAK,QAAQ,IAAI;UAAA;AAEzC,eAAK,UAAU;AACf,cAAI,QACJ;AACI,mBAAO,IAAI,KAAK,QAAQ,MAAM,gBAAgB,GAAG;UAAA;QACrD;QAEJ,MACA;AACI,iBAAO,KAAK;QAAA;MAChB;IACJ;AAQJ,SAAK,OAAO,MACZ;AACI,WAAK,QAAQ,KAAK;IAAA;AAStB,SAAK,QAAQ,MACb;AACI,WAAK,QAAQ,MAAM;IAAA;AAUvB,SAAK,UAAU;AASf,SAAK,SAAS,QAAQ,eAAe,OAAO,SAAS,IAAI,OAAO;AAGhE,QAAI,QAAQ,WACZ;AACI,WAAK,MAAM;IAAA;EACf;;;;;;EAQJ,OAAc,UACd;AACI,QAAI,KAAK,SACT;AACI,YAAM,YAAY,KAAK;AAEvB,WAAK,SAAS;AACd,gBAAU,QAAQ;IAAA;EACtB;AAER;AA3Ga,aAGK,YAA+B,cAAc;",
  "names": []
}
